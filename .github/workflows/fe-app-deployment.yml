# Triggered by the app deployment hosted at https://github.com/lealceldeiro/org.wcdevs.blog.front

name: Front-end Application Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment where the app will be deployed"
        required: true
      application-name:
        description: "The name of the application that will be deployed"
        required: true
      docker-image-tag:
        description: "The Docker image to deploy"
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy app
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEPLOY_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install CDK
        run: |
          npm i -g aws-cdk
          echo "CKD version:"
          cdk version

      - name: NPM install
        run: npm i

      - name: Deploy service stack
        if: github.ref == 'refs/heads/main'
        run: |
          npm run service:deploy:fe -- \
            -c accountId=${{ secrets.AWS_ACCOUNT_ID }} \
            -c region=${{ secrets.AWS_DEPLOY_REGION }} \
            -c environmentName=${{ github.event.inputs.environment }} \
            -c applicationName=${{ github.event.inputs.application-name }} \
            -c dockerRepositoryName=${{ github.event.inputs.application-name }}dockerrepository \
            -c dockerImageTag=${{ github.event.inputs.docker-image-tag }}

      - name: Clean up old parameter stacks
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudformation describe-stacks --region ${{ secrets.AWS_DEPLOY_REGION }} --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "${{ github.event.inputs.environment }}-${{ github.event.inputs.application-name }}-parameters-fe-service-stack-.*" | sort -r | tail -n+2 > stacks_to_delete.txt
          for stack in $(cat stacks_to_delete.txt); do aws cloudformation delete-stack --stack-name $stack --region ${{ secrets.AWS_DEPLOY_REGION }};  done
